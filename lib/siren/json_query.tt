module Siren
  grammar JsonQuery
    rule expression
      sum / product / divmod / atom
    end
    
    rule boolean_expression
      or_expression / and_expression / comparison / boolean_atom
    end
    
    rule or_expression
      first:and_expression "|" second:or_expression <Or> / and_expression
    end
    
    rule and_expression
      first:comparison "&" second:and_expression <And> / comparison
    end
    
    rule comparison
      first:expression comparator second:expression <Comparison> / boolean_atom
    end
    
    rule boolean_atom
      space ("(" boolean_expression ")" / boolean) space <BooleanAtom>
    end
    
    rule sum
      first:product operator:(add / subtract) second:sum <Sum> / product
    end
    
    rule product
      first:divmod operator:(times / divide) second:product <Product> / divmod
    end
    
    rule divmod
      first:atom '%' second:divmod <Divmod> / atom
    end
    
    rule atom
      space ("(" expression ")" / query / number / string / boolean / null) space <Atom>
    end
    
    rule times
      "*" <Multiplication>
    end
    
    rule divide
      "/" <Division>
    end
    
    rule add
      "+" <Addition>
    end
    
    rule subtract
      "-" <Subtraction>
    end
    
    rule comparator
      (not_equal / lte / gte / equal / lt / gt) <Comparator>
    end
    
    rule equal
      "=" <Equal>
    end
    
    rule not_equal
      "!=" <NotEqual>
    end
    
    rule lt
      "<" <LessThan>
    end
    
    rule lte
      "<=" <LessThanOrEqual>
    end
    
    rule gt
      ">" <GreaterThan>
    end
    
    rule gte
      ">=" <GreaterThanOrEqual>
    end
    
    rule string
      "'" ('\\' ("'" / '\\' / '/' / 'b' / 'f' / 'n' / 'r' / 't' / 'u' hex hex hex hex) / [^\'\\])* "'" <String>
    end
    
    rule number
      "-"? ("0" / [1-9] digit*) ("." digit+)? ([eE] [+-]? digit+)? <Number>
    end
    
    rule digit
      [0-9]
    end
    
    rule boolean
      (true / false) <Boolean>
    end
    
    rule true
      "true" <True>
    end
    
    rule false
      "false" <False>
    end
    
    rule null
      "null" <Null>
    end
    
    rule space
      " "*
    end
    
    rule query
      identifier filter* <Query>
    end
    
    rule identifier
      (root / current / symbol) <Identifier>
    end
    
    rule root
      "$" <Root>
    end
    
    rule current
      "@" <Current>
    end
    
    rule symbol
      [A-Za-z$_] [A-Za-z0-9$_]* <Symbol>
    end
    
    rule filter
      (slice_access / field_access / boolean_filter / map_filter / sort_filter) <Filter>
    end
    
    rule slice_access
      "[" head:number ":" tail:number ":" step:number "]" <SliceAccess>
    end
    
    rule field_access
      ("." (symbol / all) / "[" (field_access_expression / all) "]") <FieldAccess>
    end
    
    rule field_access_expression
      first:expression others:("," expression)* <FieldAccessExpression>
    end
    
    rule all
      "*" <AllFilter>
    end
    
    rule boolean_filter
      "[?" boolean_expression "]" <BooleanFilter>
    end
    
    rule map_filter
      "[=" expression "]" <MapFilter>
    end
    
    rule sort_filter
      "[" sorter expression "]" <SortFilter>
    end
    
    rule sorter
      space ("/" / "\\") space <Sorter>
    end
  end
end

