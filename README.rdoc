= Siren

* http://github.com/jcoglan/siren

Siren is a JSON and JSONQuery interpreter for Ruby. It extends the normal functionality
of JSON-to-Ruby processing with cross-references, automatic typecasting,
and a succinct query language for filtering JSON and Ruby object graphs.


== Usage

As expected, Siren can be used as a basic JSON parser, though if that's all you
want you'll be better off with more performant libraries like the +json+ gem.

  Siren.parse '[{"name": "mike"}]'
  #=> [{"name"=>"mike"}]

The features listed below go beyond standard JSON and are modelled on the feature
set listed in this SitePen article:

  http://www.sitepen.com/blog/2008/07/16/jsonquery-data-querying-beyond-jsonpath/


=== Cross-references

Siren allows JSON objects to be given IDs, and for other objects to make
references back to them from within the same document. This allows for cyclic
data structures and other objects inexpressible in standard JSON.

  data = Siren.parse <<-JSON
          [
              {
                  "id":       "obj1",
                  "name":     "mike"
              }, {
                  "name":     "bob",
                  "friend":   {"$ref": "obj1"}
              }
          ]
  JSON
  
  #=> [ {"name" => "mike", "id" => "obj1"},
        {"name" => "bob", "friend" => {"name" => "mike", "id" => "obj1"} } ]

So +bob+ has a cross-reference to +mike+, which the parser resolves for us. Note
+mike+ is not copied but is referenced by +bob+:

  data[0].__id__              #=> -607191558
  data[1]['friend'].__id__    #=> -607191558

The general syntax for a cross-reference is <tt>{"$ref": ID_STRING}</tt>; the parser
will replace this with the referenced object in the Ruby output.


=== Automatic typecasting

JSON parsers typically output hashes and arrays, these being Ruby's closest analogues
to the JavaScript types that JSON expresses. Siren allows objects to be imbued with
a +type+ attribute, which if present causes the parser to cast the object to an
instance of the named type instead of a hash. Instead of hash keys, the keys in the
JSON object become instance variables of the typed object. To allow the parser to use
a class for casting, it must be extended using <tt>Siren::Node</tt>:

  class PersonModel
    extend Siren::Node
  end
  
  data = Siren.parse <<-JSON
          {
              "type":   "person_model",
              "name":   "Jimmy",
              "age":    25
          }
  JSON
  
  #=> #<PersonModel @type="person_model", @age=25, @name="Jimmy">


== JSONQuery

JSONQuery is a language designed for filtering and transforming JSON-like object graphs.
Queries may be run against Ruby objects of any type, and may also be used as values in
JSON documents to generate data during parsing. For example:

  # Run a filter against an array
  adults = Siren.query '$[? @.age >= 18 ]', people
  
  # Embed the query for expansion by the parser
  people = Siren.parse <<-JSON
          {
              "people": [
                  {"name":  "John",   "age":  23},
                  {"name":  "Paul",   "age":  21},
                  {"name":  "George", "age":  12},
                  {"name":  "Ringo",  "age":  17}
              ],
              
              "adults": {"$ref": "$.people[? @.age >= 18 ]"}
          }
  JSON
  
As for IDs, queries are embedded using the <tt>$ref</tt> syntax. Parsing the above
yields the following Ruby object:

  { "adults" => [ {"name"=>"John", "age"=>23},
                  {"name"=>"Paul", "age"=>21}
                ],
    "people" => [ {"name"=>"John", "age"=>23},
                  {"name"=>"Paul", "age"=>21},
                  {"name"=>"George", "age"=>12},
                  {"name"=>"Ringo", "age"=>17}
                ]
  }

Siren supports the following sections of the JSONQuery language. A query is composed of
an object selector followed by zero or more filters.


=== Object selectors

An object selector is either a valid object ID, or the special symbols <tt>$</tt> or <tt>@</tt>.

* An object ID is a letter followed by zero or more letters, numbers or underscores. Use
  of an ID produces a reference to the object with that +id+ property, as illustrated above.
* <tt>$</tt> represents the root object the query is being run against, or the root of the JSON
  document currently being parsed.
* <tt>@</tt> represents the current object in a looping operation, such as a map, sort or filter.


=== Expressions

Expressions are used within filters to generate data and perform comparisons. They work
in a similar fashion to JavaScript expressions, and may contain strings, numbers, +true+,
+false+, +null+ or other JSONQuery expressions. The following operators are supported:

* Arithmetic: <tt>+</tt>, <tt>-</tt>, <tt>*</tt>, <tt>/</tt>, <tt>%</tt>
* Comparison: <tt><</tt>, <tt><=</tt>, <tt>></tt>, <tt>>=</tt>
* Equality: <tt>=</tt> for equality, <tt>!=</tt> for inequality
* Logic: <tt>&</tt> for boolean AND, <tt>|</tt> boolean OR (not bitwise)
* Subexpressions are delimited using parentheses <tt>(</tt> and <tt>)</tt>


=== Field access filters

A field access filter selects a named field (either a key from a hash or an instance
variable from any other type of object). Fields are accessed using the dot notation,
or the bracket notation with an expression evaluating to a string.

  data = {
    "key"   => "foo",
    "name"  => { "foo" => "bar" }
  }
  
  Siren.query '$.key', data
  #=> "foo"
  
  Siren.query '$.name[ $.key ]', data
  #=> "bar"


== Install

  sudo gem install siren


== License

(The MIT License)

Copyright (c) 2009 James Coglan

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
